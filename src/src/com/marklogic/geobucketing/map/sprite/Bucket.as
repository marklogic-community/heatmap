// Copyright 2002-2010 MarkLogic Corporation.  All Rights Reserved.package com.marklogic.geobucketing.map.sprite{	import com.yahoo.maps.api.core.location.BoundingBox;	import com.yahoo.maps.api.core.location.LatLon;	import com.yahoo.maps.api.overlays.PolylineOverlay;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.text.StyleSheet;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;		public class Bucket extends PolylineOverlay{				public static var OVER:String = "com.marklogic.geobucketing.map.sprite.Bucket.Over";		public static var OUT:String = "com.marklogic.geobucketing.map.sprite.Bucket.Out";				public var bucketColors:Array = [0xF6DC86, 0xF8BA69, 0xF3995F, 0xEE6651, 0xDE404F];		public var _scaleIndex:uint;		protected var _boundingBox:BoundingBox;				protected var _frequency:Number;		protected var frequencyTF:TextField;		protected var defaultLineColor:uint = 0x000000;						public function Bucket(	lineColor:uint = 0x000000, 								lineAlpha:Number = .1, 								lineThickness:Number = .5, 								geodesic:Boolean = false){			super(lineColor, lineAlpha, lineThickness, geodesic);			this.fillAlpha = .5;			this.scaleIndex = 0;			this.mouseEnabled = false;			this.addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);			this.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);			//this.addEventListener(MouseEvent.CLICK, handleMouseClick);									//////add textfield			var textFormat:TextFormat = new TextFormat();			textFormat.font = "Tahoma";			textFormat.size = 10;			textFormat.color = 0x3c3c3c;						frequencyTF = new TextField();			frequencyTF.embedFonts = true;			frequencyTF.defaultTextFormat = textFormat;			frequencyTF.width = 100; 			frequencyTF.height = 30;			frequencyTF.autoSize = TextFieldAutoSize.LEFT;			frequencyTF.mouseEnabled = false;			this.addChild(frequencyTF);			this.frequency = 0;					}									////// GETTERS AND SETTERS		public function set boundingBox(p_bb:BoundingBox):void{			_boundingBox = p_bb;				}		public function get boundingBox():BoundingBox{			return _boundingBox;		}		//////		public function set frequency(p_freq:Number):void{			_frequency = p_freq;			if (p_freq > 0){				frequencyTF.text = p_freq.toString();						}		}		public function get frequency():Number{			return _frequency;		}			//////		public function set scaleIndex(p_index:uint):void{			_scaleIndex = p_index;			this.fillColor = bucketColors[scaleIndex];			if (frequency == 0){				this.fillAlpha = 0;			}		}			public function get scaleIndex():uint{			return _scaleIndex;		}				public function set gridLineWeight(p_weight:Number):void{			this.lineThickness = p_weight;			if (p_weight <= 0) this.lineAlpha = 0; 			else this.lineAlpha = .1;		}						///// PUBLIC METHODS		public function draw():void{			this.drawBoundingBox(boundingBox);			if (frequency > 0){									var nwPoint:Point = this.getLatLonToLocalPoint(boundingBox.northwest);					frequencyTF.x = nwPoint.x;				frequencyTF.y = nwPoint.y;			}			else{				//this.removeChild(frequencyTF);			}		}						/////// PROTECTED METHODS		protected function handleMouseOver(p_evt:MouseEvent):void{			if (frequency > 0){				this.fillAlpha = .9;				this.redraw();				//dispatchEvent(new Event(Bucket.OVER));			}						//trace("Frequency: " + frequency + ", Scale Index: " + scaleIndex); 		}		protected function handleMouseOut(p_evt:MouseEvent):void{			if (frequency > 0){				this.fillAlpha = .5;				this.redraw();					//dispatchEvent(new Event(Bucket.OUT));			}		}		protected function handleMouseClick(p_evt:MouseEvent):void{			//trace("bucket click");		}			}}