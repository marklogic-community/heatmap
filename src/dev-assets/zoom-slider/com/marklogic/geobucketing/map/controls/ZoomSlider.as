package com.marklogic.geobucketing.map.controls{		import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.Sprite;	import flash.display.Graphics;	    import flash.display.Shape;			import fl.controls.LabelButton; 	import fl.controls.BaseButton;		import com.marklogic.geobucketing.map.events.ZoomSliderEvent;	import mx.flash.UIMovieClip;	public class ZoomSlider extends MovieClip {	// Public Properties:		public static var BUTTON_OVER:String = "com.marklogic.geobucketing.map.events.ZoomSlider.ButtonOver";		public static var BUTTON_OUT:String = "com.marklogic.geobucketing.map.events.ZoomSlider.ButtonOut";	// Private Properties:			protected var max:Number = 16;		protected var gap:Number = 3;		protected var _zoom:Number = 3;		protected var _enabled:Boolean = true;		protected var buttons:Array;	//// stage elements:		//protected var minusBtn:MovieClip;		//protected var plusBtn:MovieClip;		// Initialization:		public function ZoomSlider() {			buttons = new Array();			for (var i:Number = 0; i<max; i++){				var myButton:BaseButton = new BaseButton();				myButton.name = "zoom" + (i+1); 				myButton.buttonMode = true;			 				myButton.useHandCursor = true;				myButton.addEventListener(MouseEvent.CLICK, handleZoomButtonClick);  				myButton.setSize(25,11);				myButton.setStyle("upSkin", button_upSkin);				myButton.setStyle("overSkin", button_overSkin);				myButton.setStyle("downSkin", button_downSkin);				myButton.setStyle("disabledSkin", button_disabledSkin);  				myButton.y = plusBtn.height + ((myButton.height + gap) * i) + gap;					myButton.addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);				myButton.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);				this.addChild(myButton);				buttons.push(myButton);			}			//addEventListener(MouseEvent.ROLL_OUT, handleRollOut);			plusBtn.addEventListener(MouseEvent.MOUSE_UP, handlePlusClick);			plusBtn.addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);			plusBtn.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);			plusBtn.useHandCursor = true;			plusBtn.buttonMode = true;			minusBtn.addEventListener(MouseEvent.MOUSE_UP, handleMinusClick);			minusBtn.addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);			minusBtn.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);			minusBtn.y = buttons[buttons.length -1].y + buttons[buttons.length -1].height + gap;			minusBtn.useHandCursor = true;			minusBtn.buttonMode = true;			var triangle:Triangle = new Triangle();			triangle.y = buttons[0].y + 1;			triangle.alpha = .25;			triangle.mouseEnabled = false;			this.addChild(triangle);			zoom = 1;		}					// Public Methods:					public function set zoom(p_zoom:Number):void{			if (p_zoom < 1 || p_zoom > max) return;			_zoom = p_zoom;			var len:uint = buttons.length;			for (var i:int = 0; i<len; i++){				buttons[i].enabled = (i != (zoom - 1));				buttons[i].drawNow();			}		}		public function get zoom():Number{			return _zoom;		}				public override function get enabled():Boolean{			return _enabled;		}		public override function set enabled(p_bool:Boolean):void{			_enabled = p_bool;			minusBtn.enabled = p_bool;			plusBtn.enabled = p_bool;		}						// Protected methods				protected function handleMouseOver(p_evt:MouseEvent):void{			dispatchEvent(new MouseEvent(ZoomSlider.BUTTON_OVER));		}				protected function handleMouseOut(p_evt:MouseEvent):void{						dispatchEvent(new MouseEvent(ZoomSlider.BUTTON_OUT));		}				private function handleMinusClick(p_evt:MouseEvent):void{			zoom++;					sendZoomEvent();		}				private function handlePlusClick(p_evt:MouseEvent):void{			zoom--;			sendZoomEvent();		}				protected function sendZoomEvent():void{			var ev:ZoomSliderEvent = new ZoomSliderEvent(ZoomSliderEvent.ZOOM);			ev.zoom = zoom;			dispatchEvent(ev);			trace("sending event from slider3");		}		protected function handleZoomButtonClick(p_evt:MouseEvent):void{			zoom = p_evt.target.name.substr(4);			sendZoomEvent();		}			}}